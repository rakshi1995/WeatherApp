{"ast":null,"code":"function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n    {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n\n    if (reset && resetCount <= 50) {\n      resetCount++;\n\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\n\n\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? { ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n/**\n * A data provider that provides data to position an inner element of the\n * floating element (usually a triangle or caret) so that it is centered to the\n * reference element.\n * @see https://floating-ui.com/docs/arrow\n */\n\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max); // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\n\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\n\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\n\n\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place.\n\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check.\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ? // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) : // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0, // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n\n    default:\n      return [];\n  }\n}\n\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n\n  return list;\n}\n/**\n * A visibility optimizer that changes the placement of the floating element in\n * order to keep it in view. By default, only the opposite placement is tried.\n *\n * It has the ability to flip to any placement, not just the opposite one. You\n * can use a series of “fallback” placements, where each placement is\n * progressively tried until the one that fits can be used.\n * @see https://floating-ui.com/docs/flip\n */\n\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing.\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        } // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n\n\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement; // Otherwise fallback.\n\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n\n                if (placement) {\n                  resetPlacement = placement;\n                }\n\n                break;\n              }\n\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * A data provider that allows you to hide the floating element in applicable\n * situations, usually when it’s not within the same clipping context as the\n * reference element.\n * @see https://floating-ui.com/docs/hide\n */\n\n\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'hide',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = middlewareArguments;\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\n\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || [];\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        } // There are 2 or more connected rects.\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * A placement modifier that translates the floating element along the specified\n * axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\n\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n/**\n * A visibility optimizer that shifts the floating element along the specified\n * axes in order to keep it in view.\n * @see https://floating-ui.com/docs/shift\n */\n\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\n\n\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(middlewareArguments) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\n\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n\n      if (isXAxis) {\n        availableWidth = min( // Maximum clipping viewport width\n        width - overflow.right - overflow.left, overflowAvailableWidth);\n      } else {\n        availableHeight = min( // Maximum clipping viewport height\n        height - overflow.bottom - overflow.top, overflowAvailableHeight);\n      }\n\n      if (!middlewareArguments.middlewareData.shift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n\n      await apply({ ...middlewareArguments,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"names":["getAlignment","placement","split","getLengthFromAxis","axis","getSide","getMainAxisFromPlacement","includes","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","console","error","join","name","Error","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","fn","nextX","nextY","data","reset","initialPlacement","elements","warn","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","middlewareArguments","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","min","Math","max","within","min$1","value","max$1","arrow","arrowDimensions","getDimensions","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","shouldAddOffset","alignmentOffset","centerOffset","sides","allPlacements","reduce","acc","concat","oppositeSideMap","getOppositePlacement","replace","getAlignmentSides","alignment","mainAlignmentSide","main","cross","oppositeAlignmentMap","start","end","getOppositeAlignmentPlacement","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","detectOverflowOptions","placements","undefined","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByMostSpace","map","d","slice","v","sort","a","b","placementsThatFitOnEachSide","every","resetPlacement","getExpandedPlacements","oppositePlacement","getSideList","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","flip","_middlewareData$flip","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","isBasePlacement","push","overflowsData","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$map$so","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","inline","fallback","clientRects","getClientRects","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","apply","isXAxis","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions"],"sources":["C:/Users/Admin/Documents/react-weather-app/node_modules/@floating-ui/core/dist/floating-ui.core.browser.mjs"],"sourcesContent":["function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * A data provider that provides data to position an inner element of the\n * floating element (usually a triangle or caret) so that it is centered to the\n * reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * A visibility optimizer that changes the placement of the floating element in\n * order to keep it in view. By default, only the opposite placement is tried.\n *\n * It has the ability to flip to any placement, not just the opposite one. You\n * can use a series of “fallback” placements, where each placement is\n * progressively tried until the one that fits can be used.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * A data provider that allows you to hide the floating element in applicable\n * situations, usually when it’s not within the same clipping context as the\n * reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = middlewareArguments;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || [];\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * A placement modifier that translates the floating element along the specified\n * axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * A visibility optimizer that shifts the floating element along the specified\n * axes in order to keep it in view.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(middlewareArguments) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isXAxis) {\n        availableWidth = min(\n        // Maximum clipping viewport width\n        width - overflow.right - overflow.left, overflowAvailableWidth);\n      } else {\n        availableHeight = min(\n        // Maximum clipping viewport height\n        height - overflow.bottom - overflow.top, overflowAvailableHeight);\n      }\n      if (!middlewareArguments.middlewareData.shift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...middlewareArguments,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}